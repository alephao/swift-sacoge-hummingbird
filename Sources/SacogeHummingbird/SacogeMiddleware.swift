import Hummingbird
import Logging
import NIOPosix

// TODO: Custom Cache
// TODO: Handle non-immutable (maybe just skip?)

/// Middleware for serving static files.
public struct SacogeMiddleware<Context: RequestContext>: RouterMiddleware {
  let fileProvider: LocalFileSystem
  let externalToInternalMapping: [String: String]

  /// Create SacogeMiddleware
  /// - Parameters:
  ///   - rootFolder: Root folder to look for files
  ///   - externalToInternalMapping: mapping generated by sacoge (Asset.externalToInternalMapping)
  ///   - threadPool: ThreadPool used by file loading
  ///   - logger: Logger used to output file information
  public init(
    _ rootFolder: String = "public",
    externalToInternalMapping: [String: String],
    threadPool: NIOThreadPool = NIOThreadPool.singleton,
    logger: Logger = Logger(label: "SacogeMiddleware")
  ) {
    self.externalToInternalMapping = externalToInternalMapping
    self.fileProvider = LocalFileSystem(
      rootFolder: rootFolder,
      threadPool: threadPool,
      logger: logger
    )
  }

  public func handle(
    _ request: Request, context: Context, next: (Request, Context) async throws -> Response
  ) async throws -> Response {
    guard
      request.method == .get,
      let externalPath = request.uri.path.removingPercentEncoding,
      let internalPath = externalToInternalMapping[externalPath]
    else {
      return try await next(request, context)
    }

    // we have a file so indicate it came from the SacogeMiddleware
    context.coreContext.endpointPath.value = "SacogeMiddleware"

    guard
      let fileID = fileProvider.getFileIdentifier(internalPath),
      let fileAttributes = try await fileProvider.getAttributes(id: fileID)
    else {
      throw HTTPError(.notFound)
    }

    let body = try await self.fileProvider.loadFile(id: fileID, context: context)

    var headers: HTTPFields = [
      .contentLength: String(describing: fileAttributes.size)
    ]

    #if DEBUG
      headers[.cacheControl] = "no-cache"
    #else
      headers[.cacheControl] = "public, max-age=31536000, s-maxage=31536000, immutable"
    #endif

    if let ext = self.fileExtension(for: internalPath) {
      if let contentType = MediaType.getMediaType(forExtension: ext) {
        headers[.contentType] = contentType.description
      }
    }

    return Response(status: .ok, headers: headers, body: body)
  }
}

extension SacogeMiddleware {
  private func fileExtension(for path: String) -> String? {
    if let extPointIndex = path.lastIndex(of: ".") {
      let extIndex = path.index(after: extPointIndex)
      return .init(path.suffix(from: extIndex))
    }
    return nil
  }
}
